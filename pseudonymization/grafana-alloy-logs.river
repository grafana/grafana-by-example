// Grafana Cloud Authentication
local.file "GRAFANA_CLOUD_AUTH" {
  filename = "./grafana-cloud-authentication.json"
}

// Source logs from files
local.file_match "LOCAL_LOG_FILE" {
	path_targets = [ {
		__address__ = "localhost",
		__path__    = "./output.log",
		job         = "test1",
		type 		= "file",
	}, ]
}

//
loki.source.file "LOGS_FROM_FILES" {
	targets = local.file_match.LOCAL_LOG_FILE.targets
	forward_to = [ otelcol.receiver.loki.OTEL.receiver ]
	//loki.write.LOKI_CLOUD.receiver
}

// Source logs from HTTP 
loki.source.api "LOGS_FROM_HTTP" {
    http {
        listen_address = "0.0.0.0"
        listen_port = 3100
    }
	labels = {
		job = "test1",
		type = "http",
	}
    forward_to = [ otelcol.receiver.loki.OTEL.receiver ]
}

// Receiver otel loki logs forward as otel logs
otelcol.receiver.loki "OTEL" {
	output {
    	logs = [ otelcol.processor.transform.ANONYMIZE.input ]
	}
}

// Receive otel logs and anonymize
otelcol.processor.transform "ANONYMIZE" {
	error_mode = "ignore"
	log_statements {
    context = "log"
    statements = [
		`set( body, ParseJSON( body ) )`,
		`set( body["original"], body["ip"] )`,
		`set( body["ip"], SHA256( body["ip"] ) )`,
		`set( body["ip"], Substring( body["ip"], 0, 16 ) )` ]
	}

	output {
    	logs = [ otelcol.processor.transform.PRODUCTION.input,
				otelcol.processor.transform.SENSITIVE.input ]
	}
} // otelcol.exporter.otlphttp.LOCAL_OTLP_HTTP.input

// Receive otel logs and ready them for production destination
otelcol.processor.transform "PRODUCTION" {
	error_mode = "ignore"
	log_statements {
    	context = "log"
    	statements = [
	  		`keep_keys( body, [ "cnt", "name", "ip" ] )`, ]
	}
	output {
    	logs = [ otelcol.exporter.loki.TO_LOKI.input ]
	}
}

// Receive otel logs and ready them for storing sensitive data
otelcol.processor.transform "SENSITIVE" {
  	error_mode = "ignore"
  	log_statements {
    	context = "log"
    	statements = [
	  		`keep_keys( body, [ "ip", "original" ] )`, ] }	
  	output {
    	logs = [ otelcol.exporter.otlphttp.LOCAL_OTLP_HTTP.input ]
  }
}

//
otelcol.exporter.loki "TO_LOKI" {
  forward_to = [ loki.write.LOKI_CLOUD.receiver ]
}

otelcol.auth.basic "GRAFANA_CLOUD" {
	username = json_path( local.file.GRAFANA_CLOUD_AUTH.content, ".otlp.username" )[0]
	password = json_path( local.file.GRAFANA_CLOUD_AUTH.content, ".otlp.header_auth" )[0]
}

otelcol.auth.headers "OLTP_HEADERS" {
  	header {
      	key = "Authorization"
      	value = json_path( local.file.GRAFANA_CLOUD_AUTH.content, ".otlp.header_auth" )[0]
  	}
}

otelcol.exporter.otlp "GRAFANA_CLOUD_LOGS_OTLP" {
	// Does not work
  	client {
    	endpoint = json_path( local.file.GRAFANA_CLOUD_AUTH.content, ".otlp.otlp_endpoint" )[0]
		auth = otelcol.auth.basic.GRAFANA_CLOUD.handler
		//auth = otelcol.auth.headers.OLTP_HEADERS.handler
  	}
}

//otelcol.exporter.file "TO_FILE" {
//	path = "tmp.txt"
//}

//
loki.write "LOKI_CLOUD" {
	endpoint {
		url = json_path( local.file.GRAFANA_CLOUD_AUTH.content, ".loki.url" )[0]
		basic_auth { 
			username = json_path( local.file.GRAFANA_CLOUD_AUTH.content, ".loki.username" )[0]
			password = json_path( local.file.GRAFANA_CLOUD_AUTH.content, ".loki.password" )[0]
		}
	}
}

//
loki.write "LOKI_LOCAL" {
	endpoint {
		url = "http://grafana1.local:3100/loki/api/v1/push"
		basic_auth { 
			username = ""
			password = ""
		}
	}
}	

otelcol.exporter.otlphttp "LOCAL_OTLP_HTTP" {
  client {
    endpoint = "http://otel-collector:14318"
	tls {
            insecure             = true
            insecure_skip_verify = true
        }
  }
}